# Build an ecl version of the Cover Type Database:
# http://archive.ics.uci.edu/ml/datasets/Covertype
# for testing purposes.
# To run:  python createForestDatafile.py > ..\datasets\CovTypeDS.ecl
import sklearn.datasets

trainSamples = 1000
testSamples = 500
covtype = sklearn.datasets.fetch_covtype()
data = covtype.data
target = covtype.target
columnsIn = ['Elevation', 'Aspect', 'Slope', 'Hyd_DistH', 'Hyd_DistV','Road_Dist',
            'Hillshade_9', 'Hillshade_12', 'Hillshade_15', 'Fire_Dist',
            'areaIsRawah', 'areaIsNeota', 'areaIsComanche', 'areaIsPoudre',
            'soil1', 'soil2', 'soil3', 'soil4', 'soil5', 'soil6', 'soil7',
            'soil8', 'soil9', 'soil10', 'soil11', 'soil12', 'soil13',
            'soil14', 'soil15', 'soil16', 'soil17', 'soil18', 'soil19',
            'soil20', 'soil21', 'soil22', 'soil23',
            'soil24', 'soil25', 'soil26', 'soil27', 'soil28', 'soil29',
            'soil30', 'soil31', 'soil32', 'soil33',
            'soil34', 'soil35', 'soil36', 'soil37', 'soil38', 'soil39',
            'soil40', 'covType']

# Convert area one-hot (binary) columns to Nominal to exercise nominal features
columnsOut = ['id', 'Elevation', 'Aspect', 'Slope', 'Hyd_DistH', 'Hyd_DistV', 'Road_Dist',
            'Hillshade_9', 'Hillshade_12', 'Hillshade_15', 'Fire_Dist',
            'areaId',
            'soil1', 'soil2', 'soil3', 'soil4', 'soil5', 'soil6', 'soil7',
            'soil8', 'soil9', 'soil10', 'soil11', 'soil12', 'soil13',
            'soil14', 'soil15', 'soil16', 'soil17', 'soil18', 'soil19',
            'soil20', 'soil21', 'soil22', 'soil23',
            'soil24', 'soil25', 'soil26', 'soil27', 'soil28', 'soil29',
            'soil30', 'soil31', 'soil32', 'soil33',
            'soil34', 'soil35', 'soil36', 'soil37', 'soil38', 'soil39',
            'soil40', 'covType']

areaIds = {1:'Rawah', 2:'Neota', 3:'Comanche', 4:'Poudre'}

covTypes = {1:'Spruce/Fir', 2:'Lodgepole', 3:'Ponderosa', 4:'CottonWillow',
            5:'Aspen', 6:'DougFir', 7:'Bristlecone'}

excludeTypes = []

nominalColumns = [11, 52] # Indexes in columnsOut

listdata = []
datarows = data.shape[0]
for i in range(datarows):
    if target[i] in excludeTypes:
        continue
    row = list(data[i]) + [target[i]]
    listdata.append(row)


# Sample testing and training data at once (without replacement)
# to avoid any overlap
rows = trainSamples + testSamples
cols = len(columnsIn)
allRecs = sklearn.utils.resample(listdata, replace = False, n_samples = rows,
                                   random_state = 314159)
# Convert area binaries to nominal
allRecsC = []
for i in range(rows):
    areaId = 0
    row = allRecs[i]
    for j in range(10,14):
        if row[j] > 0:
            areaId = j-10+1
    outRec = [(i+1)] + list(row[:10]) + [areaId] + list(row[14:])
    allRecsC.append(outRec)

trainRecs = allRecsC[:trainSamples]
testRecs = allRecsC[trainSamples:]


outLines = []
outLines.append('EXPORT covTypeDS := MODULE')
outLine = '  EXPORT covTypeRec := RECORD'
outLines.append(outLine)
for i in range(len(columnsOut)):
    field = columnsOut[i]
    if i == 0:
      outLine = '    UNSIGNED ' + field + ';'
    else:
      outLine = '    REAL ' + field + ';'
    outLines.append(outLine)
outLine = '  END;'
outLines.append(outLine)
outLines.append('')

outLine = '  EXPORT numCols := ' + str(len(columnsOut)-1) + ';'
outLines.append(outLine)
outLine = '  EXPORT SET OF UNSIGNED nominalCols := ['
colList = []
for col in nominalColumns:
    colList.append(str(col))
colString = ', '.join(colList)
outLine += colString + '];'
outLines.append(outLine)
outLines.append('')

outLine = '  EXPORT trainRecs := DATASET(['
outLines.append(outLine)
outRecs = []
for rec in trainRecs:
    strRec = []
    for field in rec:
        strRec.append(str(field))
    outRec = '    {' + ','.join(strRec) + '}'
    outRecs.append(outRec)
outLines.append(',\n'.join(outRecs) + ']\n    , covTypeRec);')

outLines.append('')

outLine = '  EXPORT testRecs := DATASET(['
outLines.append(outLine)
outRecs = []
for rec in testRecs:
    strRec = []
    for field in rec:
        strRec.append(str(field))
    outRec = '    {' + ','.join(strRec) + '}'
    outRecs.append(outRec)
outLines.append(',\n'.join(outRecs) + ']\n    , covTypeRec);')

outLines.append('')
outLines.append('END;')

header = """// This file is automatically generated by test/python/createForestDatafile.py
// It is an ecl extract of the CoverType database from scikit-learn.
// Each record represents the cartographic data for one plot of Rocky Mountain forest, including
// the primary tree cover for each plot.
// See: http://archive.ics.uci.edu/ml/datasets/Covertype for details.

"""
outStr = header + '\n'.join(outLines)
print(outStr)
